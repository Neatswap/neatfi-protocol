/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ActorFactoryEventsUpgradeableInterface
  extends utils.Interface {
  functions: {};

  events: {
    "ActorActivated(address)": EventFragment;
    "ActorInactivated(address)": EventFragment;
    "ActorKeyCreated(address,bytes32)": EventFragment;
    "ActorKeyRequested(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActorActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActorInactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActorKeyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActorKeyRequested"): EventFragment;
}

export interface ActorActivatedEventObject {
  actorAddress: string;
}
export type ActorActivatedEvent = TypedEvent<
  [string],
  ActorActivatedEventObject
>;

export type ActorActivatedEventFilter = TypedEventFilter<ActorActivatedEvent>;

export interface ActorInactivatedEventObject {
  actorAddress: string;
}
export type ActorInactivatedEvent = TypedEvent<
  [string],
  ActorInactivatedEventObject
>;

export type ActorInactivatedEventFilter =
  TypedEventFilter<ActorInactivatedEvent>;

export interface ActorKeyCreatedEventObject {
  actorAddress: string;
  actorKey: string;
}
export type ActorKeyCreatedEvent = TypedEvent<
  [string, string],
  ActorKeyCreatedEventObject
>;

export type ActorKeyCreatedEventFilter = TypedEventFilter<ActorKeyCreatedEvent>;

export interface ActorKeyRequestedEventObject {
  actorAddress: string;
}
export type ActorKeyRequestedEvent = TypedEvent<
  [string],
  ActorKeyRequestedEventObject
>;

export type ActorKeyRequestedEventFilter =
  TypedEventFilter<ActorKeyRequestedEvent>;

export interface ActorFactoryEventsUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActorFactoryEventsUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ActorActivated(address)"(actorAddress?: null): ActorActivatedEventFilter;
    ActorActivated(actorAddress?: null): ActorActivatedEventFilter;

    "ActorInactivated(address)"(
      actorAddress?: null
    ): ActorInactivatedEventFilter;
    ActorInactivated(actorAddress?: null): ActorInactivatedEventFilter;

    "ActorKeyCreated(address,bytes32)"(
      actorAddress?: null,
      actorKey?: null
    ): ActorKeyCreatedEventFilter;
    ActorKeyCreated(
      actorAddress?: null,
      actorKey?: null
    ): ActorKeyCreatedEventFilter;

    "ActorKeyRequested(address)"(
      actorAddress?: null
    ): ActorKeyRequestedEventFilter;
    ActorKeyRequested(actorAddress?: null): ActorKeyRequestedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
