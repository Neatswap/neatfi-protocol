/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface AssetAuctionEventsUpgradeableInterface
  extends utils.Interface {
  functions: {};

  events: {
    "AuctionClaimed(bytes32,address)": EventFragment;
    "DutchAuctionBid(address,bytes32,uint256)": EventFragment;
    "EnglishAuctionBid(address,bytes32,uint256)": EventFragment;
    "LastBidApproved(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DutchAuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnglishAuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LastBidApproved"): EventFragment;
}

export interface AuctionClaimedEventObject {
  orderHash: string;
  bidder: string;
}
export type AuctionClaimedEvent = TypedEvent<
  [string, string],
  AuctionClaimedEventObject
>;

export type AuctionClaimedEventFilter = TypedEventFilter<AuctionClaimedEvent>;

export interface DutchAuctionBidEventObject {
  bidder: string;
  orderHash: string;
  bidValue: BigNumber;
}
export type DutchAuctionBidEvent = TypedEvent<
  [string, string, BigNumber],
  DutchAuctionBidEventObject
>;

export type DutchAuctionBidEventFilter = TypedEventFilter<DutchAuctionBidEvent>;

export interface EnglishAuctionBidEventObject {
  bidder: string;
  orderHash: string;
  bidValue: BigNumber;
}
export type EnglishAuctionBidEvent = TypedEvent<
  [string, string, BigNumber],
  EnglishAuctionBidEventObject
>;

export type EnglishAuctionBidEventFilter =
  TypedEventFilter<EnglishAuctionBidEvent>;

export interface LastBidApprovedEventObject {
  orderHash: string;
  bidder: string;
}
export type LastBidApprovedEvent = TypedEvent<
  [string, string],
  LastBidApprovedEventObject
>;

export type LastBidApprovedEventFilter = TypedEventFilter<LastBidApprovedEvent>;

export interface AssetAuctionEventsUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetAuctionEventsUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AuctionClaimed(bytes32,address)"(
      orderHash?: null,
      bidder?: null
    ): AuctionClaimedEventFilter;
    AuctionClaimed(orderHash?: null, bidder?: null): AuctionClaimedEventFilter;

    "DutchAuctionBid(address,bytes32,uint256)"(
      bidder?: null,
      orderHash?: null,
      bidValue?: null
    ): DutchAuctionBidEventFilter;
    DutchAuctionBid(
      bidder?: null,
      orderHash?: null,
      bidValue?: null
    ): DutchAuctionBidEventFilter;

    "EnglishAuctionBid(address,bytes32,uint256)"(
      bidder?: null,
      orderHash?: null,
      bidValue?: null
    ): EnglishAuctionBidEventFilter;
    EnglishAuctionBid(
      bidder?: null,
      orderHash?: null,
      bidValue?: null
    ): EnglishAuctionBidEventFilter;

    "LastBidApproved(bytes32,address)"(
      orderHash?: null,
      bidder?: null
    ): LastBidApprovedEventFilter;
    LastBidApproved(
      orderHash?: null,
      bidder?: null
    ): LastBidApprovedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
