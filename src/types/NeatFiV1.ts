/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace AssetStructsUpgradeable {
  export type TokenStruct = {
    tokenContract: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    tokenType: PromiseOrValue<BigNumberish>;
  };

  export type TokenStructOutput = [string, BigNumber, BigNumber, number] & {
    tokenContract: string;
    tokenId: BigNumber;
    amount: BigNumber;
    tokenType: number;
  };
}

export interface NeatFiV1Interface extends utils.Interface {
  functions: {
    "AUTHORIZED_OPERATOR()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PROTOCOL_ADMIN()": FunctionFragment;
    "PROTOCOL_TREASURER()": FunctionFragment;
    "actorFactory()": FunctionFragment;
    "approveAndResolveSwap(address,bytes32,bytes32,bytes,bytes)": FunctionFragment;
    "approveLastBid(address,bytes32)": FunctionFragment;
    "auctionModule()": FunctionFragment;
    "bidForDutchAuction(address,bytes32,uint256)": FunctionFragment;
    "bidForEnglishAuction(address,bytes32,uint256)": FunctionFragment;
    "buyItNow(address,bytes32,bytes)": FunctionFragment;
    "cancelOrder(address,bytes32)": FunctionFragment;
    "changeFeeDistributionAddress(address,address)": FunctionFragment;
    "claimDutchAuction(address,bytes32,bytes)": FunctionFragment;
    "claimEnglishAuction(address,bytes32,bytes)": FunctionFragment;
    "decreaseDucthAuctionPrice(address,bytes32,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSwapProtocolFee()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseEnglishAuctionPrice(address,bytes32,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address)": FunctionFragment;
    "makeBid((address,uint256,uint256,uint8)[],address,uint256,bytes32,bytes32)": FunctionFragment;
    "makeOrder((address,uint256,uint256,uint8)[],uint8,address,uint256,uint256,uint256,bytes32)": FunctionFragment;
    "paymentsResolver()": FunctionFragment;
    "protocolSettings()": FunctionFragment;
    "protocolStorage()": FunctionFragment;
    "protocolTreasury()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestActorKey(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sellModule()": FunctionFragment;
    "setActorFactory(address)": FunctionFragment;
    "setAuctionModule(address)": FunctionFragment;
    "setPaymentsResolver(address)": FunctionFragment;
    "setProtocolSettings(address)": FunctionFragment;
    "setProtocolStorage(address)": FunctionFragment;
    "setProtocolTreasury(address)": FunctionFragment;
    "setSellModule(address)": FunctionFragment;
    "setSwapModule(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapModule()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AUTHORIZED_OPERATOR"
      | "DEFAULT_ADMIN_ROLE"
      | "PROTOCOL_ADMIN"
      | "PROTOCOL_TREASURER"
      | "actorFactory"
      | "approveAndResolveSwap"
      | "approveLastBid"
      | "auctionModule"
      | "bidForDutchAuction"
      | "bidForEnglishAuction"
      | "buyItNow"
      | "cancelOrder"
      | "changeFeeDistributionAddress"
      | "claimDutchAuction"
      | "claimEnglishAuction"
      | "decreaseDucthAuctionPrice"
      | "getRoleAdmin"
      | "getSwapProtocolFee"
      | "grantRole"
      | "hasRole"
      | "increaseEnglishAuctionPrice"
      | "initialize"
      | "makeBid"
      | "makeOrder"
      | "paymentsResolver"
      | "protocolSettings"
      | "protocolStorage"
      | "protocolTreasury"
      | "renounceRole"
      | "requestActorKey"
      | "revokeRole"
      | "sellModule"
      | "setActorFactory"
      | "setAuctionModule"
      | "setPaymentsResolver"
      | "setProtocolSettings"
      | "setProtocolStorage"
      | "setProtocolTreasury"
      | "setSellModule"
      | "setSwapModule"
      | "supportsInterface"
      | "swapModule"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AUTHORIZED_OPERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_TREASURER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actorFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveAndResolveSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveLastBid",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidForDutchAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bidForEnglishAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItNow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeDistributionAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDutchAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimEnglishAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseDucthAuctionPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseEnglishAuctionPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBid",
    values: [
      AssetStructsUpgradeable.TokenStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOrder",
    values: [
      AssetStructsUpgradeable.TokenStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentsResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestActorKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActorFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentsResolver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolSettings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolStorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTHORIZED_OPERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_TREASURER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actorFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveAndResolveSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLastBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidForDutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidForEnglishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeDistributionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimEnglishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDucthAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseEnglishAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentsResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestActorKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setActorFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentsResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface NeatFiV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NeatFiV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTHORIZED_OPERATOR(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_TREASURER(overrides?: CallOverrides): Promise<[string]>;

    actorFactory(overrides?: CallOverrides): Promise<[string]>;

    approveAndResolveSwap(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidHash: PromiseOrValue<BytesLike>,
      orderData: PromiseOrValue<BytesLike>,
      bidData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveLastBid(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    auctionModule(overrides?: CallOverrides): Promise<[string]>;

    bidForDutchAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bidForEnglishAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyItNow(
      buyer: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeFeeDistributionAddress(
      actorAddress: PromiseOrValue<string>,
      newFeeDistributionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimDutchAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimEnglishAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseDucthAuctionPrice(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseEnglishAuctionPrice(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      swapModuleAddress: PromiseOrValue<string>,
      sellModuleAddress: PromiseOrValue<string>,
      auctionModuleAddress: PromiseOrValue<string>,
      paymentsResolverAddress: PromiseOrValue<string>,
      protocolSettingsAddress: PromiseOrValue<string>,
      protocolStorageAddress: PromiseOrValue<string>,
      actorFactoryAddress: PromiseOrValue<string>,
      protocolTreasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeBid(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      bidder: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeOrder(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      orderType: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      startPrice: PromiseOrValue<BigNumberish>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paymentsResolver(overrides?: CallOverrides): Promise<[string]>;

    protocolSettings(overrides?: CallOverrides): Promise<[string]>;

    protocolStorage(overrides?: CallOverrides): Promise<[string]>;

    protocolTreasury(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestActorKey(
      actorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellModule(overrides?: CallOverrides): Promise<[string]>;

    setActorFactory(
      newActorFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuctionModule(
      newAuctionModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentsResolver(
      newPaymentsResolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolSettings(
      newProtocolSettings: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolStorage(
      newProtocolStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolTreasury(
      newProtocolTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSellModule(
      newSellModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapModule(
      newSwapModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapModule(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AUTHORIZED_OPERATOR(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_ADMIN(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_TREASURER(overrides?: CallOverrides): Promise<string>;

  actorFactory(overrides?: CallOverrides): Promise<string>;

  approveAndResolveSwap(
    maker: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    bidHash: PromiseOrValue<BytesLike>,
    orderData: PromiseOrValue<BytesLike>,
    bidData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveLastBid(
    maker: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  auctionModule(overrides?: CallOverrides): Promise<string>;

  bidForDutchAuction(
    bidder: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    bidValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bidForEnglishAuction(
    bidder: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    bidValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyItNow(
    buyer: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    maker: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeFeeDistributionAddress(
    actorAddress: PromiseOrValue<string>,
    newFeeDistributionAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimDutchAuction(
    bidder: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimEnglishAuction(
    bidder: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseDucthAuctionPrice(
    maker: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapProtocolFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseEnglishAuctionPrice(
    maker: PromiseOrValue<string>,
    orderHash: PromiseOrValue<BytesLike>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    swapModuleAddress: PromiseOrValue<string>,
    sellModuleAddress: PromiseOrValue<string>,
    auctionModuleAddress: PromiseOrValue<string>,
    paymentsResolverAddress: PromiseOrValue<string>,
    protocolSettingsAddress: PromiseOrValue<string>,
    protocolStorageAddress: PromiseOrValue<string>,
    actorFactoryAddress: PromiseOrValue<string>,
    protocolTreasuryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeBid(
    tokens: AssetStructsUpgradeable.TokenStruct[],
    bidder: PromiseOrValue<string>,
    listingTime: PromiseOrValue<BigNumberish>,
    orderHash: PromiseOrValue<BytesLike>,
    actorKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeOrder(
    tokens: AssetStructsUpgradeable.TokenStruct[],
    orderType: PromiseOrValue<BigNumberish>,
    maker: PromiseOrValue<string>,
    listingTime: PromiseOrValue<BigNumberish>,
    expirationTime: PromiseOrValue<BigNumberish>,
    startPrice: PromiseOrValue<BigNumberish>,
    actorKey: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paymentsResolver(overrides?: CallOverrides): Promise<string>;

  protocolSettings(overrides?: CallOverrides): Promise<string>;

  protocolStorage(overrides?: CallOverrides): Promise<string>;

  protocolTreasury(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestActorKey(
    actorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellModule(overrides?: CallOverrides): Promise<string>;

  setActorFactory(
    newActorFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuctionModule(
    newAuctionModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentsResolver(
    newPaymentsResolver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolSettings(
    newProtocolSettings: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolStorage(
    newProtocolStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolTreasury(
    newProtocolTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSellModule(
    newSellModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapModule(
    newSwapModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapModule(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTHORIZED_OPERATOR(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_ADMIN(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_TREASURER(overrides?: CallOverrides): Promise<string>;

    actorFactory(overrides?: CallOverrides): Promise<string>;

    approveAndResolveSwap(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidHash: PromiseOrValue<BytesLike>,
      orderData: PromiseOrValue<BytesLike>,
      bidData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveLastBid(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionModule(overrides?: CallOverrides): Promise<string>;

    bidForDutchAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bidForEnglishAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItNow(
      buyer: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFeeDistributionAddress(
      actorAddress: PromiseOrValue<string>,
      newFeeDistributionAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimDutchAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimEnglishAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseDucthAuctionPrice(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseEnglishAuctionPrice(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      swapModuleAddress: PromiseOrValue<string>,
      sellModuleAddress: PromiseOrValue<string>,
      auctionModuleAddress: PromiseOrValue<string>,
      paymentsResolverAddress: PromiseOrValue<string>,
      protocolSettingsAddress: PromiseOrValue<string>,
      protocolStorageAddress: PromiseOrValue<string>,
      actorFactoryAddress: PromiseOrValue<string>,
      protocolTreasuryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeBid(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      bidder: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    makeOrder(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      orderType: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      startPrice: PromiseOrValue<BigNumberish>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    paymentsResolver(overrides?: CallOverrides): Promise<string>;

    protocolSettings(overrides?: CallOverrides): Promise<string>;

    protocolStorage(overrides?: CallOverrides): Promise<string>;

    protocolTreasury(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestActorKey(
      actorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sellModule(overrides?: CallOverrides): Promise<string>;

    setActorFactory(
      newActorFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionModule(
      newAuctionModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentsResolver(
      newPaymentsResolver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolSettings(
      newProtocolSettings: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolStorage(
      newProtocolStorage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolTreasury(
      newProtocolTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellModule(
      newSellModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapModule(
      newSwapModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapModule(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    AUTHORIZED_OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_TREASURER(overrides?: CallOverrides): Promise<BigNumber>;

    actorFactory(overrides?: CallOverrides): Promise<BigNumber>;

    approveAndResolveSwap(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidHash: PromiseOrValue<BytesLike>,
      orderData: PromiseOrValue<BytesLike>,
      bidData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveLastBid(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    auctionModule(overrides?: CallOverrides): Promise<BigNumber>;

    bidForDutchAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bidForEnglishAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyItNow(
      buyer: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeFeeDistributionAddress(
      actorAddress: PromiseOrValue<string>,
      newFeeDistributionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimDutchAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimEnglishAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseDucthAuctionPrice(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseEnglishAuctionPrice(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      swapModuleAddress: PromiseOrValue<string>,
      sellModuleAddress: PromiseOrValue<string>,
      auctionModuleAddress: PromiseOrValue<string>,
      paymentsResolverAddress: PromiseOrValue<string>,
      protocolSettingsAddress: PromiseOrValue<string>,
      protocolStorageAddress: PromiseOrValue<string>,
      actorFactoryAddress: PromiseOrValue<string>,
      protocolTreasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeBid(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      bidder: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeOrder(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      orderType: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      startPrice: PromiseOrValue<BigNumberish>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paymentsResolver(overrides?: CallOverrides): Promise<BigNumber>;

    protocolSettings(overrides?: CallOverrides): Promise<BigNumber>;

    protocolStorage(overrides?: CallOverrides): Promise<BigNumber>;

    protocolTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestActorKey(
      actorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellModule(overrides?: CallOverrides): Promise<BigNumber>;

    setActorFactory(
      newActorFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuctionModule(
      newAuctionModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentsResolver(
      newPaymentsResolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolSettings(
      newProtocolSettings: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolStorage(
      newProtocolStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolTreasury(
      newProtocolTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSellModule(
      newSellModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapModule(
      newSwapModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapModule(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTHORIZED_OPERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROTOCOL_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_TREASURER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    actorFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveAndResolveSwap(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidHash: PromiseOrValue<BytesLike>,
      orderData: PromiseOrValue<BytesLike>,
      bidData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveLastBid(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    auctionModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidForDutchAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bidForEnglishAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyItNow(
      buyer: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeFeeDistributionAddress(
      actorAddress: PromiseOrValue<string>,
      newFeeDistributionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimDutchAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimEnglishAuction(
      bidder: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseDucthAuctionPrice(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapProtocolFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseEnglishAuctionPrice(
      maker: PromiseOrValue<string>,
      orderHash: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      swapModuleAddress: PromiseOrValue<string>,
      sellModuleAddress: PromiseOrValue<string>,
      auctionModuleAddress: PromiseOrValue<string>,
      paymentsResolverAddress: PromiseOrValue<string>,
      protocolSettingsAddress: PromiseOrValue<string>,
      protocolStorageAddress: PromiseOrValue<string>,
      actorFactoryAddress: PromiseOrValue<string>,
      protocolTreasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeBid(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      bidder: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      orderHash: PromiseOrValue<BytesLike>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeOrder(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      orderType: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      startPrice: PromiseOrValue<BigNumberish>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paymentsResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestActorKey(
      actorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setActorFactory(
      newActorFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionModule(
      newAuctionModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentsResolver(
      newPaymentsResolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolSettings(
      newProtocolSettings: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolStorage(
      newProtocolStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolTreasury(
      newProtocolTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSellModule(
      newSellModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapModule(
      newSwapModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
