/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace AssetStructsUpgradeable {
  export type OrderStruct = {
    tokenHashes: PromiseOrValue<BytesLike>[];
    maker: PromiseOrValue<string>;
    orderType: PromiseOrValue<BigNumberish>;
    listingTime: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    startPrice: PromiseOrValue<BigNumberish>;
    endPrice: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BytesLike>;
    status: PromiseOrValue<BigNumberish>;
    actorKey: PromiseOrValue<BytesLike>;
  };

  export type OrderStructOutput = [
    string[],
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    string
  ] & {
    tokenHashes: string[];
    maker: string;
    orderType: number;
    listingTime: BigNumber;
    expirationTime: BigNumber;
    startPrice: BigNumber;
    endPrice: BigNumber;
    salt: string;
    status: number;
    actorKey: string;
  };

  export type TokenStruct = {
    tokenContract: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    tokenType: PromiseOrValue<BigNumberish>;
  };

  export type TokenStructOutput = [string, BigNumber, BigNumber, number] & {
    tokenContract: string;
    tokenId: BigNumber;
    amount: BigNumber;
    tokenType: number;
  };
}

export interface INeatFiProtocolStorageInterface extends utils.Interface {
  functions: {
    "changeOrderEndPrice(bytes32,uint256)": FunctionFragment;
    "changeOrderExpirationTime(bytes32,uint256)": FunctionFragment;
    "changeOrderStartPrice(bytes32,uint256)": FunctionFragment;
    "changeOrderStatus(bytes32,uint8)": FunctionFragment;
    "getOrder(bytes32)": FunctionFragment;
    "getOrderMaker(bytes32)": FunctionFragment;
    "getToken(bytes32)": FunctionFragment;
    "isValidActorKey(bytes32,bytes32)": FunctionFragment;
    "isValidOrder(bytes32)": FunctionFragment;
    "isValidOwner(bytes32,address)": FunctionFragment;
    "makeOrder((address,uint256,uint256,uint8)[],uint8,address,uint256,uint256,uint256,uint256,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeOrderEndPrice"
      | "changeOrderExpirationTime"
      | "changeOrderStartPrice"
      | "changeOrderStatus"
      | "getOrder"
      | "getOrderMaker"
      | "getToken"
      | "isValidActorKey"
      | "isValidOrder"
      | "isValidOwner"
      | "makeOrder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeOrderEndPrice",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOrderExpirationTime",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOrderStartPrice",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOrderStatus",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderMaker",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidActorKey",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidOwner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOrder",
    values: [
      AssetStructsUpgradeable.TokenStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeOrderEndPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOrderExpirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOrderStartPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidActorKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeOrder", data: BytesLike): Result;

  events: {};
}

export interface INeatFiProtocolStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INeatFiProtocolStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeOrderEndPrice(
      orderHash: PromiseOrValue<BytesLike>,
      newEndPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOrderExpirationTime(
      orderHash: PromiseOrValue<BytesLike>,
      newExpirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOrderStartPrice(
      orderHash: PromiseOrValue<BytesLike>,
      newStartPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOrderStatus(
      orderHash: PromiseOrValue<BytesLike>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [AssetStructsUpgradeable.OrderStructOutput] & {
        order: AssetStructsUpgradeable.OrderStructOutput;
      }
    >;

    getOrderMaker(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { maker: string }>;

    getToken(
      tokenHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[AssetStructsUpgradeable.TokenStructOutput]>;

    isValidActorKey(
      orderHash: PromiseOrValue<BytesLike>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidOrder(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidOwner(
      orderHash: PromiseOrValue<BytesLike>,
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    makeOrder(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      orderType: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      startPrice: PromiseOrValue<BigNumberish>,
      endPrice: PromiseOrValue<BigNumberish>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  changeOrderEndPrice(
    orderHash: PromiseOrValue<BytesLike>,
    newEndPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOrderExpirationTime(
    orderHash: PromiseOrValue<BytesLike>,
    newExpirationTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOrderStartPrice(
    orderHash: PromiseOrValue<BytesLike>,
    newStartPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOrderStatus(
    orderHash: PromiseOrValue<BytesLike>,
    newStatus: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<AssetStructsUpgradeable.OrderStructOutput>;

  getOrderMaker(
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getToken(
    tokenHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<AssetStructsUpgradeable.TokenStructOutput>;

  isValidActorKey(
    orderHash: PromiseOrValue<BytesLike>,
    actorKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidOrder(
    orderHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidOwner(
    orderHash: PromiseOrValue<BytesLike>,
    maker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  makeOrder(
    tokens: AssetStructsUpgradeable.TokenStruct[],
    orderType: PromiseOrValue<BigNumberish>,
    maker: PromiseOrValue<string>,
    listingTime: PromiseOrValue<BigNumberish>,
    expirationTime: PromiseOrValue<BigNumberish>,
    startPrice: PromiseOrValue<BigNumberish>,
    endPrice: PromiseOrValue<BigNumberish>,
    actorKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeOrderEndPrice(
      orderHash: PromiseOrValue<BytesLike>,
      newEndPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOrderExpirationTime(
      orderHash: PromiseOrValue<BytesLike>,
      newExpirationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOrderStartPrice(
      orderHash: PromiseOrValue<BytesLike>,
      newStartPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOrderStatus(
      orderHash: PromiseOrValue<BytesLike>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOrder(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<AssetStructsUpgradeable.OrderStructOutput>;

    getOrderMaker(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getToken(
      tokenHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<AssetStructsUpgradeable.TokenStructOutput>;

    isValidActorKey(
      orderHash: PromiseOrValue<BytesLike>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidOrder(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidOwner(
      orderHash: PromiseOrValue<BytesLike>,
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeOrder(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      orderType: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      startPrice: PromiseOrValue<BigNumberish>,
      endPrice: PromiseOrValue<BigNumberish>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    changeOrderEndPrice(
      orderHash: PromiseOrValue<BytesLike>,
      newEndPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOrderExpirationTime(
      orderHash: PromiseOrValue<BytesLike>,
      newExpirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOrderStartPrice(
      orderHash: PromiseOrValue<BytesLike>,
      newStartPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOrderStatus(
      orderHash: PromiseOrValue<BytesLike>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrder(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderMaker(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(
      tokenHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidActorKey(
      orderHash: PromiseOrValue<BytesLike>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidOrder(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidOwner(
      orderHash: PromiseOrValue<BytesLike>,
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeOrder(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      orderType: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      startPrice: PromiseOrValue<BigNumberish>,
      endPrice: PromiseOrValue<BigNumberish>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeOrderEndPrice(
      orderHash: PromiseOrValue<BytesLike>,
      newEndPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOrderExpirationTime(
      orderHash: PromiseOrValue<BytesLike>,
      newExpirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOrderStartPrice(
      orderHash: PromiseOrValue<BytesLike>,
      newStartPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOrderStatus(
      orderHash: PromiseOrValue<BytesLike>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderMaker(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(
      tokenHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidActorKey(
      orderHash: PromiseOrValue<BytesLike>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidOrder(
      orderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidOwner(
      orderHash: PromiseOrValue<BytesLike>,
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeOrder(
      tokens: AssetStructsUpgradeable.TokenStruct[],
      orderType: PromiseOrValue<BigNumberish>,
      maker: PromiseOrValue<string>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      startPrice: PromiseOrValue<BigNumberish>,
      endPrice: PromiseOrValue<BigNumberish>,
      actorKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
