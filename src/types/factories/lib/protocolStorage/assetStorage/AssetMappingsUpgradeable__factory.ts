/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AssetMappingsUpgradeable,
  AssetMappingsUpgradeableInterface,
} from "../../../../lib/protocolStorage/assetStorage/AssetMappingsUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "tokenHashes",
            type: "bytes32[]",
          },
          {
            internalType: "address payable",
            name: "maker",
            type: "address",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderType",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "listingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expirationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endPrice",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "actorKey",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct AssetStructsUpgradeable.Order",
        name: "order",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "OrderCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "tokenHashes",
            type: "bytes32[]",
          },
          {
            internalType: "address payable",
            name: "maker",
            type: "address",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderType",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "listingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expirationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endPrice",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "actorKey",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct AssetStructsUpgradeable.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "OrderEndPriceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "tokenHashes",
            type: "bytes32[]",
          },
          {
            internalType: "address payable",
            name: "maker",
            type: "address",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderType",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "listingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expirationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endPrice",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "actorKey",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct AssetStructsUpgradeable.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "OrderExpirationTimeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "tokenHashes",
            type: "bytes32[]",
          },
          {
            internalType: "address payable",
            name: "maker",
            type: "address",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderType",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "listingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expirationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endPrice",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "actorKey",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct AssetStructsUpgradeable.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "OrderStartPriceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "tokenHashes",
            type: "bytes32[]",
          },
          {
            internalType: "address payable",
            name: "maker",
            type: "address",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderType",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "listingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expirationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endPrice",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "enum AssetEnumsUpgradeable.AssetOrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "actorKey",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct AssetStructsUpgradeable.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "OrderStatusChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "orderInfo",
    outputs: [
      {
        internalType: "address payable",
        name: "maker",
        type: "address",
      },
      {
        internalType: "enum AssetEnumsUpgradeable.AssetOrderType",
        name: "orderType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "listingTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expirationTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endPrice",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "enum AssetEnumsUpgradeable.AssetOrderStatus",
        name: "status",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "actorKey",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "tokenInfo",
    outputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum AssetEnumsUpgradeable.TokenType",
        name: "tokenType",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610225806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806303565ea11461003b578063238e203f14610098575b600080fd5b61007f610049366004610111565b600260208190526000918252604090912080546001820154928201546003909201546001600160a01b0390911692919060ff1684565b60405161008f9493929190610140565b60405180910390f35b6100fc6100a6366004610111565b6001602081905260009182526040909120908101546002820154600383015460048401546005850154600686015460078701546008909701546001600160a01b0387169760ff600160a01b909804881697169089565b60405161008f99989796959493929190610190565b60006020828403121561012357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03851681526020810184905260408101839052608081016003831061016e5761016e61012a565b82606083015295945050505050565b6005811061018d5761018d61012a565b50565b6001600160a01b038a16815261012081016101aa8a61017d565b8960208301528860408301528760608301528660808301528560a08301528460c08301526101d78461017d565b60e0820193909352610100015297965050505050505056fea2646970667358221220fbe434ab6dff8f656689d01571f057e4273f88ab76d22cb14378198787a7bc1964736f6c634300080f0033";

type AssetMappingsUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetMappingsUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetMappingsUpgradeable__factory extends ContractFactory {
  constructor(...args: AssetMappingsUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetMappingsUpgradeable> {
    return super.deploy(overrides || {}) as Promise<AssetMappingsUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AssetMappingsUpgradeable {
    return super.attach(address) as AssetMappingsUpgradeable;
  }
  override connect(signer: Signer): AssetMappingsUpgradeable__factory {
    return super.connect(signer) as AssetMappingsUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetMappingsUpgradeableInterface {
    return new utils.Interface(_abi) as AssetMappingsUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetMappingsUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetMappingsUpgradeable;
  }
}
