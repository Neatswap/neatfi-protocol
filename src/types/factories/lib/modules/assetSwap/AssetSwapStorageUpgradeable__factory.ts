/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AssetSwapStorageUpgradeable,
  AssetSwapStorageUpgradeableInterface,
} from "../../../../lib/modules/assetSwap/AssetSwapStorageUpgradeable";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "bidsByOrder",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "swapEscrowParties",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346100155760d4908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c908163354f936014605e5750636755062314603457600080fd5b34605b576020366003190112605b5760406020916004358152600283522054604051908152f35b80fd5b905034609a576040366003190112609a5760243560043583526001602052604083208054821015609657835260209283902001548152f35b8380fd5b5080fdfea2646970667358221220f7480f6791c6aac3f032e2d29c0169189c348189371ee4286ebd72a06661f2aa64736f6c634300080f0033";

type AssetSwapStorageUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetSwapStorageUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetSwapStorageUpgradeable__factory extends ContractFactory {
  constructor(...args: AssetSwapStorageUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetSwapStorageUpgradeable> {
    return super.deploy(
      overrides || {}
    ) as Promise<AssetSwapStorageUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AssetSwapStorageUpgradeable {
    return super.attach(address) as AssetSwapStorageUpgradeable;
  }
  override connect(signer: Signer): AssetSwapStorageUpgradeable__factory {
    return super.connect(signer) as AssetSwapStorageUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetSwapStorageUpgradeableInterface {
    return new utils.Interface(_abi) as AssetSwapStorageUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetSwapStorageUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetSwapStorageUpgradeable;
  }
}
