/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AssetSwapStorageUpgradeable,
  AssetSwapStorageUpgradeableInterface,
} from "../../../../lib/modules/assetSwap/AssetSwapStorageUpgradeable";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "bidsByOrder",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "swapEscrowParties",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610114806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063354f936014603757806367550623146058575b600080fd5b6046604236600460a5565b6075565b60405190815260200160405180910390f35b6046606336600460c6565b60026020526000908152604090205481565b60016020528160005260406000208181548110609057600080fd5b90600052602060002001600091509150505481565b6000806040838503121560b757600080fd5b50508035926020909101359150565b60006020828403121560d757600080fd5b503591905056fea264697066735822122026895474fc7d13166b8c658da9f994d926361d761c594a877c75b2f4b0d0633764736f6c634300080f0033";

type AssetSwapStorageUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetSwapStorageUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetSwapStorageUpgradeable__factory extends ContractFactory {
  constructor(...args: AssetSwapStorageUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetSwapStorageUpgradeable> {
    return super.deploy(
      overrides || {}
    ) as Promise<AssetSwapStorageUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AssetSwapStorageUpgradeable {
    return super.attach(address) as AssetSwapStorageUpgradeable;
  }
  override connect(signer: Signer): AssetSwapStorageUpgradeable__factory {
    return super.connect(signer) as AssetSwapStorageUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetSwapStorageUpgradeableInterface {
    return new utils.Interface(_abi) as AssetSwapStorageUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetSwapStorageUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetSwapStorageUpgradeable;
  }
}
