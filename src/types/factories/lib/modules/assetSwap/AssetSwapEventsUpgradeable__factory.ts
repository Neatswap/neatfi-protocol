/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AssetSwapEventsUpgradeable,
  AssetSwapEventsUpgradeableInterface,
} from "../../../../lib/modules/assetSwap/AssetSwapEventsUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "bidHash",
        type: "bytes32",
      },
    ],
    name: "BidForOrder",
    type: "event",
  },
];

const _bytecode =
  "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea264697066735822122058e59dae057a534ce411c3adf4425e04725724d28a2d829298a779c62ea44c0f64736f6c634300080f0033";

type AssetSwapEventsUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetSwapEventsUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetSwapEventsUpgradeable__factory extends ContractFactory {
  constructor(...args: AssetSwapEventsUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetSwapEventsUpgradeable> {
    return super.deploy(overrides || {}) as Promise<AssetSwapEventsUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AssetSwapEventsUpgradeable {
    return super.attach(address) as AssetSwapEventsUpgradeable;
  }
  override connect(signer: Signer): AssetSwapEventsUpgradeable__factory {
    return super.connect(signer) as AssetSwapEventsUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetSwapEventsUpgradeableInterface {
    return new utils.Interface(_abi) as AssetSwapEventsUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetSwapEventsUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetSwapEventsUpgradeable;
  }
}
