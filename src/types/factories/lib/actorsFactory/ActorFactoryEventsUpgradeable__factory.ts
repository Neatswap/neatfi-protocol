/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ActorFactoryEventsUpgradeable,
  ActorFactoryEventsUpgradeableInterface,
} from "../../../lib/actorsFactory/ActorFactoryEventsUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "actorAddress",
        type: "address",
      },
    ],
    name: "ActorActivated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "actorAddress",
        type: "address",
      },
    ],
    name: "ActorInactivated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "actorAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "actorKey",
        type: "bytes32",
      },
    ],
    name: "ActorKeyCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "actorAddress",
        type: "address",
      },
    ],
    name: "ActorKeyRequested",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ec0819764baef71bfb3e23737ddf1a79344438701ef1304914569e80e399a25d64736f6c634300080f0033";

type ActorFactoryEventsUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ActorFactoryEventsUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ActorFactoryEventsUpgradeable__factory extends ContractFactory {
  constructor(...args: ActorFactoryEventsUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ActorFactoryEventsUpgradeable> {
    return super.deploy(
      overrides || {}
    ) as Promise<ActorFactoryEventsUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ActorFactoryEventsUpgradeable {
    return super.attach(address) as ActorFactoryEventsUpgradeable;
  }
  override connect(signer: Signer): ActorFactoryEventsUpgradeable__factory {
    return super.connect(signer) as ActorFactoryEventsUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ActorFactoryEventsUpgradeableInterface {
    return new utils.Interface(_abi) as ActorFactoryEventsUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ActorFactoryEventsUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ActorFactoryEventsUpgradeable;
  }
}
