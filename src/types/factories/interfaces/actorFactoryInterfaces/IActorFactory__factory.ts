/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IActorFactory,
  IActorFactoryInterface,
} from "../../../interfaces/actorFactoryInterfaces/IActorFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "actorAddress",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "newFeeDistributionAddress",
        type: "address",
      },
    ],
    name: "changeFeeDistributionAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "actor",
        type: "address",
      },
    ],
    name: "getActorKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "actorKey",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "actorAddress",
        type: "address",
      },
    ],
    name: "getFeeDistributionAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "feeDistributionAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "actorAddress",
        type: "address",
      },
    ],
    name: "requestActorKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IActorFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IActorFactoryInterface {
    return new utils.Interface(_abi) as IActorFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IActorFactory {
    return new Contract(address, _abi, signerOrProvider) as IActorFactory;
  }
}
